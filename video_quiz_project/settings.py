"""
Django settings for video_quiz_project project.

Generated by 'django-admin startproject' using Django 5.2.4.
"""

from pathlib import Path
import os
from datetime import timedelta

# For Railway/PostgreSQL
import dj_database_url

BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-h8&!t&_e+g%4&n$2iux3_4se+z=7!dzz3w*2*f^@=k3yhwlv_-')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# Railway: set ALLOWED_HOSTS in environment variables, fallback to '*'
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'videoquizapp-production.up.railway.app').split(',')

CSRF_TRUSTED_ORIGINS = [
    'https://videoquizapp-production.up.railway.app',
    'https://thriving-bubblegum-bf086a.netlify.app',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'corsheaders',

    # Custom apps
    'users',
    'videos',
    'quizzes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this line for static files handling
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOWED_ORIGINS = [
    os.environ.get('FRONTEND_URL', 'https://your-app-name.netlify.app'),
    'https://videoquizapp.netlify.app',
    'https://thriving-bubblegum-bf086a.netlify.app',  # Your actual Netlify domain
]

# REST Framework config
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

ROOT_URLCONF = 'video_quiz_project.urls'


# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'video_quiz_project.wsgi.application'

AUTH_USER_MODEL = 'users.User'

# Database
# Use Railway's DATABASE_URL if available, else fallback to local sqlite3
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL', f'sqlite:///{BASE_DIR / "db.sqlite3"}')
    )
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Simple JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Whitenoise settings for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Auto-create superuser in production
if not DEBUG and os.environ.get('RAILWAY_ENVIRONMENT'):
    import django
    from django.core.management import execute_from_command_line
    from django.db import connection
    from django.db.utils import OperationalError
    
    def create_superuser_if_needed():
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1 FROM users_user WHERE is_superuser = true LIMIT 1")
                if not cursor.fetchone():
                    from users.models import User
                    User.objects.create_superuser(
                        username=os.environ.get('DJANGO_SUPERUSER_USERNAME', 'admin'),
                        email=os.environ.get('DJANGO_SUPERUSER_EMAIL', 'admin@example.com'),
                        password=os.environ.get('DJANGO_SUPERUSER_PASSWORD', 'SecurePassword123!'),
                        is_superadmin=True
                    )
        except (OperationalError, Exception):
            pass  # Ignore errors during startup